"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./data/quotes.ts":
/*!************************!*\
  !*** ./data/quotes.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findQuotesWithFallback: () => (/* binding */ findQuotesWithFallback),\n/* harmony export */   getAvailableTopics: () => (/* binding */ getAvailableTopics),\n/* harmony export */   getRandomQuotes: () => (/* binding */ getRandomQuotes),\n/* harmony export */   getSuggestedTopics: () => (/* binding */ getSuggestedTopics),\n/* harmony export */   quotesData: () => (/* binding */ quotesData)\n/* harmony export */ });\nconst quotesData = {\n    love: [\n        {\n            text: \"Being deeply loved by someone gives you strength, while loving someone deeply gives you courage.\",\n            author: \"Lao Tzu\"\n        },\n        {\n            text: \"The best thing to hold onto in life is each other.\",\n            author: \"Audrey Hepburn\"\n        },\n        {\n            text: \"Love is composed of a single soul inhabiting two bodies.\",\n            author: \"Aristotle\"\n        },\n        {\n            text: \"Where there is love there is life.\",\n            author: \"Mahatma Gandhi\"\n        },\n        {\n            text: \"Love is not only something you feel, it is something you do.\",\n            author: \"David Wilkerson\"\n        }\n    ],\n    life: [\n        {\n            text: \"Life is what happens to you while you're busy making other plans.\",\n            author: \"John Lennon\"\n        },\n        {\n            text: \"The purpose of our lives is to be happy.\",\n            author: \"Dalai Lama\"\n        },\n        {\n            text: \"In the end, it's not the years in your life that count. It's the life in your years.\",\n            author: \"Abraham Lincoln\"\n        },\n        {\n            text: \"Life is really simple, but we insist on making it complicated.\",\n            author: \"Confucius\"\n        },\n        {\n            text: \"The biggest adventure you can take is to live the life of your dreams.\",\n            author: \"Oprah Winfrey\"\n        }\n    ],\n    inspirational: [\n        {\n            text: \"The future belongs to those who believe in the beauty of their dreams.\",\n            author: \"Eleanor Roosevelt\"\n        },\n        {\n            text: \"It is during our darkest moments that we must focus to see the light.\",\n            author: \"Aristotle\"\n        },\n        {\n            text: \"Believe you can and you're halfway there.\",\n            author: \"Theodore Roosevelt\"\n        },\n        {\n            text: \"The only impossible journey is the one you never begin.\",\n            author: \"Tony Robbins\"\n        },\n        {\n            text: \"In the middle of difficulty lies opportunity.\",\n            author: \"Albert Einstein\"\n        }\n    ],\n    humor: [\n        {\n            text: \"I have not failed. I've just found 10,000 ways that won't work.\",\n            author: \"Thomas A. Edison\"\n        },\n        {\n            text: \"Life is too important to be taken seriously.\",\n            author: \"Oscar Wilde\"\n        },\n        {\n            text: \"The secret to staying young is to live honestly, eat slowly, and lie about your age.\",\n            author: \"Lucille Ball\"\n        },\n        {\n            text: \"I'm not superstitious, but I am a little stitious.\",\n            author: \"Michael Scott\"\n        },\n        {\n            text: \"Age is an issue of mind over matter. If you don't mind, it doesn't matter.\",\n            author: \"Mark Twain\"\n        }\n    ],\n    philosophy: [\n        {\n            text: \"The unexamined life is not worth living.\",\n            author: \"Socrates\"\n        },\n        {\n            text: \"We are what we repeatedly do. Excellence, then, is not an act, but a habit.\",\n            author: \"Aristotle\"\n        },\n        {\n            text: \"The only way to deal with an unfree world is to become so absolutely free that your very existence is an act of rebellion.\",\n            author: \"Albert Camus\"\n        },\n        {\n            text: \"Man is condemned to be free; because once thrown into the world, he is responsible for everything he does.\",\n            author: \"Jean-Paul Sartre\"\n        },\n        {\n            text: \"The only true wisdom is in knowing you know nothing.\",\n            author: \"Socrates\"\n        }\n    ],\n    god: [\n        {\n            text: \"God helps those who help themselves.\",\n            author: \"Benjamin Franklin\"\n        },\n        {\n            text: \"Faith is taking the first step even when you don't see the whole staircase.\",\n            author: \"Martin Luther King Jr.\"\n        },\n        {\n            text: \"God's work done in God's way will never lack God's supply.\",\n            author: \"Hudson Taylor\"\n        },\n        {\n            text: \"Trust in the Lord with all your heart and lean not on your own understanding.\",\n            author: \"Proverbs 3:5\"\n        },\n        {\n            text: \"Be still, and know that I am God.\",\n            author: \"Psalm 46:10\"\n        }\n    ],\n    truth: [\n        {\n            text: \"The truth will set you free, but first it will piss you off.\",\n            author: \"Gloria Steinem\"\n        },\n        {\n            text: \"Three things cannot be long hidden: the sun, the moon, and the truth.\",\n            author: \"Buddha\"\n        },\n        {\n            text: \"If you tell the truth, you don't have to remember anything.\",\n            author: \"Mark Twain\"\n        },\n        {\n            text: \"The truth is not for all men, but only for those who seek it.\",\n            author: \"Ayn Rand\"\n        },\n        {\n            text: \"A lie gets halfway around the world before the truth has a chance to get its pants on.\",\n            author: \"Winston Churchill\"\n        }\n    ],\n    wisdom: [\n        {\n            text: \"The only true wisdom is in knowing you know nothing.\",\n            author: \"Socrates\"\n        },\n        {\n            text: \"In three words I can sum up everything I've learned about life: it goes on.\",\n            author: \"Robert Frost\"\n        },\n        {\n            text: \"The fool doth think he is wise, but the wise man knows himself to be a fool.\",\n            author: \"William Shakespeare\"\n        },\n        {\n            text: \"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\",\n            author: \"Eleanor Roosevelt\"\n        },\n        {\n            text: \"It is better to remain silent at the risk of being thought a fool, than to talk and remove all doubt of it.\",\n            author: \"Maurice Switzer\"\n        }\n    ],\n    romance: [\n        {\n            text: \"I have waited for this opportunity for more than half a century, to repeat to you once again my vow of eternal fidelity and everlasting love.\",\n            author: \"Gabriel García Márquez\"\n        },\n        {\n            text: \"You know you're in love when you can't fall asleep because reality is finally better than your dreams.\",\n            author: \"Dr. Seuss\"\n        },\n        {\n            text: \"The best love is the kind that awakens the soul and makes us reach for more.\",\n            author: \"Nicholas Sparks\"\n        },\n        {\n            text: \"I love you not only for what you are, but for what I am when I am with you.\",\n            author: \"Elizabeth Barrett Browning\"\n        },\n        {\n            text: \"Whatever our souls are made of, his and mine are the same.\",\n            author: \"Emily Brontë\"\n        }\n    ],\n    poetry: [\n        {\n            text: \"Poetry is when an emotion has found its thought and the thought has found words.\",\n            author: \"Robert Frost\"\n        },\n        {\n            text: \"A poet is, before anything else, a person who is passionately in love with language.\",\n            author: \"W.H. Auden\"\n        },\n        {\n            text: \"Poetry is the spontaneous overflow of powerful feelings: it takes its origin from emotion recollected in tranquility.\",\n            author: \"William Wordsworth\"\n        },\n        {\n            text: \"If I read a book and it makes my whole body so cold no fire can ever warm me, I know that is poetry.\",\n            author: \"Emily Dickinson\"\n        },\n        {\n            text: \"Poetry is not a turning loose of emotion, but an escape from emotion; it is not the expression of personality, but an escape from personality.\",\n            author: \"T.S. Eliot\"\n        }\n    ],\n    \"life lessons\": [\n        {\n            text: \"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\",\n            author: \"Bill Keane\"\n        },\n        {\n            text: \"Life is 10% what happens to you and 90% how you react to it.\",\n            author: \"Charles R. Swindoll\"\n        },\n        {\n            text: \"The only way to do great work is to love what you do.\",\n            author: \"Steve Jobs\"\n        },\n        {\n            text: \"Don't cry because it's over, smile because it happened.\",\n            author: \"Dr. Seuss\"\n        },\n        {\n            text: \"Be yourself; everyone else is already taken.\",\n            author: \"Oscar Wilde\"\n        }\n    ],\n    death: [\n        {\n            text: \"Death is not the opposite of life, but a part of it.\",\n            author: \"Haruki Murakami\"\n        },\n        {\n            text: \"The fear of death follows from the fear of life. A man who lives fully is prepared to die at any time.\",\n            author: \"Mark Twain\"\n        },\n        {\n            text: \"Death is nothing, but to live defeated and inglorious is to die daily.\",\n            author: \"Napoleon Bonaparte\"\n        },\n        {\n            text: \"I'm not afraid of death; I just don't want to be there when it happens.\",\n            author: \"Woody Allen\"\n        },\n        {\n            text: \"Death leaves a heartache no one can heal, love leaves a memory no one can steal.\",\n            author: \"Richard Puz\"\n        }\n    ],\n    happiness: [\n        {\n            text: \"Happiness is not something ready made. It comes from your own actions.\",\n            author: \"Dalai Lama\"\n        },\n        {\n            text: \"The purpose of our lives is to be happy.\",\n            author: \"Dalai Lama\"\n        },\n        {\n            text: \"Happiness is when what you think, what you say, and what you do are in harmony.\",\n            author: \"Mahatma Gandhi\"\n        },\n        {\n            text: \"For every minute you are angry you lose sixty seconds of happiness.\",\n            author: \"Ralph Waldo Emerson\"\n        },\n        {\n            text: \"Happiness depends upon ourselves.\",\n            author: \"Aristotle\"\n        }\n    ],\n    hope: [\n        {\n            text: \"Hope is the thing with feathers that perches in the soul.\",\n            author: \"Emily Dickinson\"\n        },\n        {\n            text: \"We must accept finite disappointment, but never lose infinite hope.\",\n            author: \"Martin Luther King Jr.\"\n        },\n        {\n            text: \"Hope is being able to see that there is light despite all of the darkness.\",\n            author: \"Desmond Tutu\"\n        },\n        {\n            text: \"Everything that is done in this world is done by hope.\",\n            author: \"Martin Luther\"\n        },\n        {\n            text: \"Hope is a waking dream.\",\n            author: \"Aristotle\"\n        }\n    ],\n    faith: [\n        {\n            text: \"Faith is taking the first step even when you don't see the whole staircase.\",\n            author: \"Martin Luther King Jr.\"\n        },\n        {\n            text: \"Faith is not the belief that God will do what you want. It is the belief that God will do what is right.\",\n            author: \"Max Lucado\"\n        },\n        {\n            text: \"Keep your dreams alive. Understand to achieve anything requires faith and belief in yourself.\",\n            author: \"Gail Devers\"\n        },\n        {\n            text: \"Faith is the strength by which a shattered world shall emerge into the light.\",\n            author: \"Helen Keller\"\n        },\n        {\n            text: \"Faith makes all things possible... love makes all things easy.\",\n            author: \"Dwight L. Moody\"\n        }\n    ],\n    spirituality: [\n        {\n            text: \"The spiritual journey is individual, highly personal. It can't be organized or regulated.\",\n            author: \"Ram Dass\"\n        },\n        {\n            text: \"Your task is not to seek for love, but merely to seek and find all the barriers within yourself that you have built against it.\",\n            author: \"Rumi\"\n        },\n        {\n            text: \"The soul always knows what to do to heal itself. The challenge is to silence the mind.\",\n            author: \"Caroline Myss\"\n        },\n        {\n            text: \"We are not human beings having a spiritual experience. We are spiritual beings having a human experience.\",\n            author: \"Pierre Teilhard de Chardin\"\n        },\n        {\n            text: \"Peace cannot be kept by force; it can only be achieved by understanding.\",\n            author: \"Albert Einstein\"\n        }\n    ],\n    religion: [\n        {\n            text: \"Religion is the opium of the people.\",\n            author: \"Karl Marx\"\n        },\n        {\n            text: \"I like your Christ, I do not like your Christians. Your Christians are so unlike your Christ.\",\n            author: \"Mahatma Gandhi\"\n        },\n        {\n            text: \"The way to see by Faith is to shut the Eye of Reason.\",\n            author: \"Benjamin Franklin\"\n        },\n        {\n            text: \"My religion is very simple. My religion is kindness.\",\n            author: \"Dalai Lama\"\n        },\n        {\n            text: \"Science without religion is lame, religion without science is blind.\",\n            author: \"Albert Einstein\"\n        }\n    ],\n    motivational: [\n        {\n            text: \"The only way to do great work is to love what you do.\",\n            author: \"Steve Jobs\"\n        },\n        {\n            text: \"Your limitation—it's only your imagination.\",\n            author: \"Unknown\"\n        },\n        {\n            text: \"Push yourself, because no one else is going to do it for you.\",\n            author: \"Unknown\"\n        },\n        {\n            text: \"Great things never come from comfort zones.\",\n            author: \"Unknown\"\n        },\n        {\n            text: \"Dream it. Wish it. Do it.\",\n            author: \"Unknown\"\n        }\n    ],\n    motivation: [\n        {\n            text: \"The only way to do great work is to love what you do.\",\n            author: \"Steve Jobs\"\n        },\n        {\n            text: \"Success is not final, failure is not fatal: it is the courage to continue that counts.\",\n            author: \"Winston Churchill\"\n        },\n        {\n            text: \"Don't watch the clock; do what it does. Keep going.\",\n            author: \"Sam Levenson\"\n        },\n        {\n            text: \"The future depends on what you do today.\",\n            author: \"Mahatma Gandhi\"\n        },\n        {\n            text: \"It always seems impossible until it's done.\",\n            author: \"Nelson Mandela\"\n        }\n    ],\n    relationships: [\n        {\n            text: \"The greatest thing in the world is to know how to belong to oneself.\",\n            author: \"Michel de Montaigne\"\n        },\n        {\n            text: \"We accept the love we think we deserve.\",\n            author: \"Stephen Chbosky\"\n        },\n        {\n            text: \"The meeting of two personalities is like the contact of two chemical substances: if there is any reaction, both are transformed.\",\n            author: \"Carl Jung\"\n        },\n        {\n            text: \"A successful marriage requires falling in love many times, always with the same person.\",\n            author: \"Mignon McLaughlin\"\n        },\n        {\n            text: \"The best way to find out if you can trust somebody is to trust them.\",\n            author: \"Ernest Hemingway\"\n        }\n    ],\n    time: [\n        {\n            text: \"Time you enjoy wasting is not wasted time.\",\n            author: \"Marthe Troly-Curtin\"\n        },\n        {\n            text: \"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\",\n            author: \"Eleanor Roosevelt\"\n        },\n        {\n            text: \"Time is what we want most, but what we use worst.\",\n            author: \"William Penn\"\n        },\n        {\n            text: \"The two most powerful warriors are patience and time.\",\n            author: \"Leo Tolstoy\"\n        },\n        {\n            text: \"Lost time is never found again.\",\n            author: \"Benjamin Franklin\"\n        }\n    ],\n    science: [\n        {\n            text: \"Science is not only compatible with spirituality; it is a profound source of spirituality.\",\n            author: \"Carl Sagan\"\n        },\n        {\n            text: \"The important thing is not to stop questioning.\",\n            author: \"Albert Einstein\"\n        },\n        {\n            text: \"Science without religion is lame, religion without science is blind.\",\n            author: \"Albert Einstein\"\n        },\n        {\n            text: \"Equipped with his five senses, man explores the universe around him and calls the adventure Science.\",\n            author: \"Edwin Hubble\"\n        },\n        {\n            text: \"The greatest enemy of knowledge is not ignorance, it is the illusion of knowledge.\",\n            author: \"Stephen Hawking\"\n        }\n    ],\n    writing: [\n        {\n            text: \"There is nothing to writing. All you do is sit down at a typewriter and bleed.\",\n            author: \"Ernest Hemingway\"\n        },\n        {\n            text: \"Write what you know. That should leave you with a lot of free time.\",\n            author: \"Howard Nemerov\"\n        },\n        {\n            text: \"A writer is someone for whom writing is more difficult than it is for other people.\",\n            author: \"Thomas Mann\"\n        },\n        {\n            text: \"The first draft of anything is shit.\",\n            author: \"Ernest Hemingway\"\n        },\n        {\n            text: \"You can make anything by writing.\",\n            author: \"C.S. Lewis\"\n        }\n    ],\n    success: [\n        {\n            text: \"Success is not final, failure is not fatal: it is the courage to continue that counts.\",\n            author: \"Winston Churchill\"\n        },\n        {\n            text: \"The way to get started is to quit talking and begin doing.\",\n            author: \"Walt Disney\"\n        },\n        {\n            text: \"Don't be afraid to give up the good to go for the great.\",\n            author: \"John D. Rockefeller\"\n        },\n        {\n            text: \"Innovation distinguishes between a leader and a follower.\",\n            author: \"Steve Jobs\"\n        },\n        {\n            text: \"Success is walking from failure to failure with no loss of enthusiasm.\",\n            author: \"Winston Churchill\"\n        }\n    ],\n    courage: [\n        {\n            text: \"Courage is not the absence of fear, but the mastery of it.\",\n            author: \"Mark Twain\"\n        },\n        {\n            text: \"You gain strength, courage, and confidence by every experience in which you really stop to look fear in the face.\",\n            author: \"Eleanor Roosevelt\"\n        },\n        {\n            text: \"It takes courage to grow up and become who you really are.\",\n            author: \"E.E. Cummings\"\n        },\n        {\n            text: \"Courage is grace under pressure.\",\n            author: \"Ernest Hemingway\"\n        },\n        {\n            text: \"Being deeply loved by someone gives you strength, while loving someone deeply gives you courage.\",\n            author: \"Lao Tzu\"\n        }\n    ],\n    growth: [\n        {\n            text: \"Growth begins at the end of your comfort zone.\",\n            author: \"Neale Donald Walsch\"\n        },\n        {\n            text: \"The only way to make sense out of change is to plunge into it, move with it, and join the dance.\",\n            author: \"Alan Watts\"\n        },\n        {\n            text: \"Be yourself; everyone else is already taken.\",\n            author: \"Oscar Wilde\"\n        },\n        {\n            text: \"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\",\n            author: \"Bill Keane\"\n        },\n        {\n            text: \"Life is what happens to you while you're busy making other plans.\",\n            author: \"John Lennon\"\n        }\n    ],\n    perseverance: [\n        {\n            text: \"It does not matter how slowly you go as long as you do not stop.\",\n            author: \"Confucius\"\n        },\n        {\n            text: \"Perseverance is not a long race; it is many short races one after the other.\",\n            author: \"Walter Elliot\"\n        },\n        {\n            text: \"Never give up, for that is just the place and time that the tide will turn.\",\n            author: \"Harriet Beecher Stowe\"\n        },\n        {\n            text: \"The difference between ordinary and extraordinary is that little extra.\",\n            author: \"Jimmy Johnson\"\n        },\n        {\n            text: \"Fall seven times, stand up eight.\",\n            author: \"Japanese Proverb\"\n        }\n    ],\n    leadership: [\n        {\n            text: \"A leader is one who knows the way, goes the way, and shows the way.\",\n            author: \"John C. Maxwell\"\n        },\n        {\n            text: \"The greatest leader is not necessarily the one who does the greatest things. He is the one that gets the people to do the greatest things.\",\n            author: \"Ronald Reagan\"\n        },\n        {\n            text: \"Leadership is not about being in charge. It's about taking care of those in your charge.\",\n            author: \"Simon Sinek\"\n        },\n        {\n            text: \"A true leader has the confidence to stand alone, the courage to make tough decisions, and the compassion to listen to the needs of others.\",\n            author: \"Douglas MacArthur\"\n        },\n        {\n            text: \"Leadership is the capacity to translate vision into reality.\",\n            author: \"Warren Bennis\"\n        }\n    ]\n};\n// Synonyms and related terms mapping\nconst topicSynonyms = {\n    love: [\n        \"affection\",\n        \"romance\",\n        \"relationship\",\n        \"heart\",\n        \"passion\",\n        \"adore\",\n        \"romantic\",\n        \"dating\",\n        \"soulmate\",\n        \"valentine\"\n    ],\n    life: [\n        \"living\",\n        \"existence\",\n        \"journey\",\n        \"experience\",\n        \"being\",\n        \"alive\",\n        \"world\",\n        \"reality\",\n        \"days\"\n    ],\n    success: [\n        \"achievement\",\n        \"victory\",\n        \"triumph\",\n        \"accomplishment\",\n        \"winning\",\n        \"goal\",\n        \"achieve\",\n        \"prosper\",\n        \"excel\"\n    ],\n    motivational: [\n        \"inspiration\",\n        \"drive\",\n        \"ambition\",\n        \"encouragement\",\n        \"uplifting\",\n        \"empowering\",\n        \"inspiring\"\n    ],\n    motivation: [\n        \"inspiration\",\n        \"drive\",\n        \"ambition\",\n        \"encouragement\",\n        \"uplifting\",\n        \"empowering\",\n        \"inspiring\"\n    ],\n    inspirational: [\n        \"motivation\",\n        \"uplifting\",\n        \"encouraging\",\n        \"inpirational\",\n        \"empowering\",\n        \"moving\",\n        \"touching\"\n    ],\n    happiness: [\n        \"joy\",\n        \"bliss\",\n        \"contentment\",\n        \"pleasure\",\n        \"delight\",\n        \"cheerful\",\n        \"glad\",\n        \"merry\",\n        \"joyful\"\n    ],\n    wisdom: [\n        \"knowledge\",\n        \"intelligence\",\n        \"insight\",\n        \"understanding\",\n        \"smart\",\n        \"wise\",\n        \"clever\",\n        \"sage\"\n    ],\n    courage: [\n        \"bravery\",\n        \"strength\",\n        \"valor\",\n        \"fearlessness\",\n        \"bold\",\n        \"brave\",\n        \"heroic\",\n        \"daring\"\n    ],\n    humor: [\n        \"funny\",\n        \"comedy\",\n        \"laugh\",\n        \"joke\",\n        \"witty\",\n        \"amusing\",\n        \"hilarious\",\n        \"comic\"\n    ],\n    truth: [\n        \"honesty\",\n        \"reality\",\n        \"fact\",\n        \"genuine\",\n        \"authentic\",\n        \"real\",\n        \"sincere\",\n        \"honest\"\n    ],\n    death: [\n        \"mortality\",\n        \"dying\",\n        \"end\",\n        \"passing\",\n        \"eternal\",\n        \"grave\",\n        \"farewell\",\n        \"memorial\"\n    ],\n    god: [\n        \"divine\",\n        \"lord\",\n        \"creator\",\n        \"almighty\",\n        \"heaven\",\n        \"prayer\",\n        \"sacred\",\n        \"holy\"\n    ],\n    faith: [\n        \"belief\",\n        \"trust\",\n        \"religion\",\n        \"spiritual\",\n        \"prayer\",\n        \"devotion\",\n        \"worship\",\n        \"religious\"\n    ],\n    religion: [\n        \"faith\",\n        \"spiritual\",\n        \"god\",\n        \"prayer\",\n        \"church\",\n        \"worship\",\n        \"sacred\",\n        \"divine\"\n    ],\n    science: [\n        \"research\",\n        \"study\",\n        \"experiment\",\n        \"discovery\",\n        \"knowledge\",\n        \"facts\",\n        \"learning\",\n        \"technology\"\n    ],\n    growth: [\n        \"development\",\n        \"progress\",\n        \"improvement\",\n        \"change\",\n        \"evolution\",\n        \"advancement\",\n        \"learning\"\n    ],\n    perseverance: [\n        \"persistence\",\n        \"determination\",\n        \"endurance\",\n        \"patience\",\n        \"resilience\",\n        \"strength\"\n    ],\n    leadership: [\n        \"leader\",\n        \"guide\",\n        \"management\",\n        \"authority\",\n        \"influence\",\n        \"power\",\n        \"responsibility\"\n    ],\n    \"life lessons\": [\n        \"experience\",\n        \"learning\",\n        \"wisdom\",\n        \"growth\",\n        \"advice\",\n        \"guidance\",\n        \"insight\"\n    ],\n    spirituality: [\n        \"spiritual\",\n        \"soul\",\n        \"meditation\",\n        \"mindfulness\",\n        \"divine\",\n        \"sacred\",\n        \"prayer\",\n        \"enlightenment\"\n    ],\n    philosophy: [\n        \"philosophical\",\n        \"wisdom\",\n        \"thinking\",\n        \"ideas\",\n        \"thought\",\n        \"logic\",\n        \"reason\",\n        \"mind\"\n    ],\n    romance: [\n        \"romantic\",\n        \"love\",\n        \"relationship\",\n        \"passion\",\n        \"dating\",\n        \"valentine\",\n        \"heart\",\n        \"kiss\"\n    ],\n    poetry: [\n        \"poems\",\n        \"verses\",\n        \"literature\",\n        \"writing\",\n        \"poet\",\n        \"rhyme\",\n        \"verse\",\n        \"lyric\"\n    ],\n    relationships: [\n        \"friendship\",\n        \"connection\",\n        \"bond\",\n        \"partnership\",\n        \"family\",\n        \"friends\",\n        \"together\",\n        \"social\"\n    ],\n    time: [\n        \"moment\",\n        \"duration\",\n        \"period\",\n        \"age\",\n        \"clock\",\n        \"hour\",\n        \"day\",\n        \"year\",\n        \"lifetime\"\n    ],\n    writing: [\n        \"literature\",\n        \"composition\",\n        \"authoring\",\n        \"poetry\",\n        \"book\",\n        \"novel\",\n        \"author\",\n        \"write\",\n        \"pen\"\n    ],\n    hope: [\n        \"optimism\",\n        \"faith\",\n        \"belief\",\n        \"trust\",\n        \"confidence\",\n        \"expectation\",\n        \"aspiration\",\n        \"dream\"\n    ]\n};\n// Semantic relationships between topics (related concepts)\nconst semanticRelationships = {\n    love: [\n        \"relationships\",\n        \"romance\",\n        \"happiness\",\n        \"life\"\n    ],\n    relationships: [\n        \"love\",\n        \"romance\",\n        \"life\",\n        \"happiness\"\n    ],\n    romance: [\n        \"love\",\n        \"relationships\",\n        \"poetry\",\n        \"happiness\"\n    ],\n    happiness: [\n        \"joy\",\n        \"life\",\n        \"hope\",\n        \"inspirational\"\n    ],\n    success: [\n        \"motivational\",\n        \"motivation\",\n        \"leadership\",\n        \"wisdom\",\n        \"perseverance\"\n    ],\n    motivational: [\n        \"success\",\n        \"inspirational\",\n        \"courage\",\n        \"perseverance\"\n    ],\n    motivation: [\n        \"success\",\n        \"inspirational\",\n        \"courage\",\n        \"perseverance\"\n    ],\n    inspirational: [\n        \"motivational\",\n        \"motivation\",\n        \"hope\",\n        \"wisdom\",\n        \"life\"\n    ],\n    courage: [\n        \"strength\",\n        \"perseverance\",\n        \"leadership\",\n        \"faith\"\n    ],\n    wisdom: [\n        \"philosophy\",\n        \"truth\",\n        \"life\",\n        \"growth\",\n        \"science\"\n    ],\n    philosophy: [\n        \"wisdom\",\n        \"truth\",\n        \"life\",\n        \"thinking\"\n    ],\n    spirituality: [\n        \"faith\",\n        \"religion\",\n        \"god\",\n        \"wisdom\"\n    ],\n    faith: [\n        \"spirituality\",\n        \"religion\",\n        \"god\",\n        \"hope\"\n    ],\n    religion: [\n        \"faith\",\n        \"spirituality\",\n        \"god\",\n        \"wisdom\"\n    ],\n    god: [\n        \"faith\",\n        \"religion\",\n        \"spirituality\",\n        \"hope\"\n    ],\n    life: [\n        \"wisdom\",\n        \"happiness\",\n        \"growth\",\n        \"time\",\n        \"life lessons\"\n    ],\n    death: [\n        \"life\",\n        \"time\",\n        \"philosophy\",\n        \"wisdom\"\n    ],\n    time: [\n        \"life\",\n        \"wisdom\",\n        \"philosophy\",\n        \"growth\"\n    ],\n    hope: [\n        \"faith\",\n        \"inspirational\",\n        \"happiness\",\n        \"courage\"\n    ],\n    truth: [\n        \"wisdom\",\n        \"philosophy\",\n        \"science\",\n        \"life\"\n    ],\n    growth: [\n        \"wisdom\",\n        \"life\",\n        \"success\",\n        \"perseverance\",\n        \"life lessons\"\n    ],\n    perseverance: [\n        \"courage\",\n        \"success\",\n        \"motivational\",\n        \"strength\"\n    ],\n    leadership: [\n        \"success\",\n        \"courage\",\n        \"wisdom\",\n        \"responsibility\"\n    ],\n    writing: [\n        \"poetry\",\n        \"literature\",\n        \"wisdom\",\n        \"creativity\"\n    ],\n    poetry: [\n        \"writing\",\n        \"romance\",\n        \"beauty\",\n        \"art\"\n    ],\n    humor: [\n        \"happiness\",\n        \"joy\",\n        \"life\",\n        \"wisdom\"\n    ],\n    science: [\n        \"truth\",\n        \"knowledge\",\n        \"discovery\",\n        \"wisdom\"\n    ],\n    \"life lessons\": [\n        \"wisdom\",\n        \"life\",\n        \"growth\",\n        \"experience\"\n    ]\n};\n// Simple Levenshtein distance function for fuzzy matching\nconst levenshteinDistance = (str1, str2)=>{\n    const matrix = [];\n    for(let i = 0; i <= str2.length; i++){\n        matrix[i] = [\n            i\n        ];\n    }\n    for(let j = 0; j <= str1.length; j++){\n        matrix[0][j] = j;\n    }\n    for(let i = 1; i <= str2.length; i++){\n        for(let j = 1; j <= str1.length; j++){\n            if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            } else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);\n            }\n        }\n    }\n    return matrix[str2.length][str1.length];\n};\n// Find the best matching topic using multiple strategies\nconst findBestTopicMatch = (searchTerm)=>{\n    const normalizedSearch = searchTerm.toLowerCase().trim();\n    const allTopics = Object.keys(quotesData);\n    // 1. Check for exact synonym matches\n    for (const [topic, synonyms] of Object.entries(topicSynonyms)){\n        if (synonyms.includes(normalizedSearch)) {\n            return topic;\n        }\n    }\n    // 2. Check for partial matches (contains)\n    const partialMatches = allTopics.filter((topic)=>topic.includes(normalizedSearch) || normalizedSearch.includes(topic));\n    if (partialMatches.length > 0) {\n        // Return the shortest match (most specific)\n        return partialMatches.sort((a, b)=>a.length - b.length)[0];\n    }\n    // 3. Fuzzy matching with distance threshold\n    const fuzzyMatches = allTopics.map((topic)=>({\n            topic,\n            distance: levenshteinDistance(normalizedSearch, topic)\n        })).filter((match)=>match.distance <= Math.max(2, Math.floor(normalizedSearch.length * 0.4))).sort((a, b)=>a.distance - b.distance);\n    return fuzzyMatches.length > 0 ? fuzzyMatches[0].topic : null;\n};\nconst getRandomQuotes = function(topic) {\n    let count = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n    const normalizedTopic = topic.toLowerCase().trim();\n    // First try exact match\n    let topicQuotes = quotesData[normalizedTopic];\n    if (!topicQuotes) {\n        // Try fuzzy matching - find the best match\n        const bestMatch = findBestTopicMatch(normalizedTopic);\n        if (bestMatch) {\n            topicQuotes = quotesData[bestMatch];\n        }\n    }\n    if (!topicQuotes) {\n        return [];\n    }\n    const shuffled = [\n        ...topicQuotes\n    ].sort(()=>0.5 - Math.random());\n    return shuffled.slice(0, count);\n};\nconst getAvailableTopics = ()=>{\n    return Object.keys(quotesData);\n};\nconst getSuggestedTopics = function(topic) {\n    let maxSuggestions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;\n    const normalizedTopic = topic.toLowerCase().trim();\n    const allTopics = Object.keys(quotesData);\n    // Check for exact match first\n    if (quotesData[normalizedTopic]) {\n        return [];\n    }\n    // Calculate similarity scores for all topics with enhanced scoring\n    const topicScores = allTopics.map((availableTopic)=>{\n        var _topicSynonyms_availableTopic, _semanticRelationships_normalizedTopic, _semanticRelationships_availableTopic;\n        const distance = levenshteinDistance(normalizedTopic, availableTopic);\n        const contains = availableTopic.includes(normalizedTopic) || normalizedTopic.includes(availableTopic);\n        // Check if it's a synonym\n        const isSynonym = ((_topicSynonyms_availableTopic = topicSynonyms[availableTopic]) === null || _topicSynonyms_availableTopic === void 0 ? void 0 : _topicSynonyms_availableTopic.includes(normalizedTopic)) || Object.entries(topicSynonyms).some((param)=>{\n            let [key, synonyms] = param;\n            return key === normalizedTopic && synonyms.includes(availableTopic);\n        });\n        // Check semantic relationships\n        const isSemanticallRelated = ((_semanticRelationships_normalizedTopic = semanticRelationships[normalizedTopic]) === null || _semanticRelationships_normalizedTopic === void 0 ? void 0 : _semanticRelationships_normalizedTopic.includes(availableTopic)) || ((_semanticRelationships_availableTopic = semanticRelationships[availableTopic]) === null || _semanticRelationships_availableTopic === void 0 ? void 0 : _semanticRelationships_availableTopic.includes(normalizedTopic));\n        // Calculate a composite score (lower is better)\n        let score = distance;\n        if (contains) score -= 10; // Strong bonus for contains\n        if (isSynonym) score -= 15; // Even stronger bonus for synonyms\n        if (isSemanticallRelated) score -= 8; // Good bonus for semantic relationships\n        return {\n            topic: availableTopic,\n            score,\n            distance,\n            contains,\n            isSynonym,\n            isSemanticallRelated\n        };\n    });\n    // Sort by composite score\n    topicScores.sort((a, b)=>a.score - b.score);\n    // Return suggestions with multiple criteria\n    const suggestions = [];\n    // First priority: synonyms and exact contains\n    const highPriority = topicScores.filter((item)=>item.isSynonym || item.contains);\n    suggestions.push(...highPriority.slice(0, 3));\n    // Second priority: semantically related\n    if (suggestions.length < maxSuggestions) {\n        const semanticMatches = topicScores.filter((item)=>item.isSemanticallRelated && !suggestions.some((s)=>s.topic === item.topic));\n        suggestions.push(...semanticMatches.slice(0, maxSuggestions - suggestions.length));\n    }\n    // Third priority: fuzzy matches\n    if (suggestions.length < maxSuggestions) {\n        const fuzzyMatches = topicScores.filter((item)=>item.distance <= Math.max(3, Math.floor(normalizedTopic.length * 0.5)) && !suggestions.some((s)=>s.topic === item.topic));\n        suggestions.push(...fuzzyMatches.slice(0, maxSuggestions - suggestions.length));\n    }\n    // Return unique suggestions\n    return [\n        ...new Set(suggestions.map((item)=>item.topic))\n    ].slice(0, maxSuggestions);\n};\nconst findQuotesWithFallback = function(topic) {\n    let count = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n    const normalizedTopic = topic.toLowerCase().trim();\n    // Check if we have an exact match first\n    const exactMatch = quotesData[normalizedTopic];\n    if (exactMatch) {\n        const shuffled = [\n            ...exactMatch\n        ].sort(()=>0.5 - Math.random());\n        return {\n            quotes: shuffled.slice(0, count),\n            suggestions: [],\n            matchedTopic: normalizedTopic\n        };\n    }\n    // Try fuzzy matching\n    const bestMatch = findBestTopicMatch(normalizedTopic);\n    if (bestMatch && quotesData[bestMatch]) {\n        const shuffled = [\n            ...quotesData[bestMatch]\n        ].sort(()=>0.5 - Math.random());\n        return {\n            quotes: shuffled.slice(0, count),\n            suggestions: [],\n            matchedTopic: bestMatch\n        };\n    }\n    // If no quotes found, get suggestions\n    const suggestions = getSuggestedTopics(topic);\n    return {\n        quotes: [],\n        suggestions: []\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/quotes.ts\n"));

/***/ })

});